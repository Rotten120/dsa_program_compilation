class Node:
    
    # Initialize the node.
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    
    # Initialize the list.
    def __init__(self):
        self.head = None
        self.tail = None

    # Insert data before the first node.
    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.head:
            new_node.next = self.head
            self.head = new_node
        else:
            self.head = new_node
            self.tail = new_node
    
    # Insert data after the last node.
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head:
            self.tail.next = new_node
            self.tail = new_node
        else:
            self.head = new_node
            self.tail = new_node

    # Return true if the data exist.
    def search(self, data):
        current_node = self.head
        while current_node:
            if current_node.data == data:
                return True
            else:
                current_node = current_node.next
        return False

    # Remove the starting node. 
    def remove_beginning(self):
        if not self.head:
            return None
        removed_data = self.head.data
        self.head = self.head.next
        if not self.head:
            self.tail = None
        return removed_data

    # Remove the last node.
    def remove_at_end(self):
        if not self.head:
            return None
        if self.head == self.tail:
            removed_data = self.head.data
            self.head = None
            self.tail = None
            return removed_data
        
        current = self.head
        while current.next != self.tail:
            current = current.next
        removed_data = self.tail.data
        current.next = None
        self.tail = current
        return removed_data
    
    # Remove specific node.
    def remove_at(self, data):
        if not self.head:
            return None
        if self.head.data == data:
            return self.remove_beginning()

        current = self.head 
        while current.next and current.next.data != data: 
            current = current.next 
        if not current.next: 
            return None

        if current.next == self.tail: 
            self.tail = current 
        removed = current.next.data 
        current.next = current.next.next 
        return removed

    # Display the current list that it has.
    def display(self):
        current_node = self.head
        while current_node:
            print(current_node.data, end=" ===> ")
            current_node = current_node.next
        print("None")

# Add the data in list
sandwich_preparation = LinkedList()
sandwich_preparation.insert_at_beginning("prepare breads")
sandwich_preparation.insert_at_end("spread the filling in bread")
sandwich_preparation.insert_at_end("top the bread with filling with another bread")

# Print full list.
print("Full List of preparing a sandwich:")
sandwich_preparation.display()

# Print the list without the first node.
print("\nRemoved the first node:", sandwich_preparation.remove_beginning())
sandwich_preparation.display()

# Print the list without the first and last node.
print("\nRemoved the last node:", sandwich_preparation.remove_at_end())
sandwich_preparation.display()

# Print the list without the first, last, and the given node.
print("\nRemoved 'spread the filling in bread':", sandwich_preparation.remove_at("spread the filling in bread"))
sandwich_preparation.display()